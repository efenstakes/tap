// export external libraries
const { check } = require('express-validator/check')

// import internal modules
const db = require('../config/database')




// validate the user register body parameters
module.exports.registr = [


    check('password')
    .exists().withMessage('Password must be provided')
    .isLength({ min: 7, max: 30 }).withMessage('Password must be atleast 7 characters long')
    .matches('[0-9]').withMessage('Name must contain numbers')
    .matches('[a-zA-Z]').withMessage('Name must contain letters'),

    check('password_confirmation')
    .custom((passcon, { req }) => passcon == req.body.password)
    .withMessage('Passwords Must Match'),

    check('email')
    .exists().withMessage('Email must be provided')
    .isEmail().withMessage('Email provided must be valid'),

    check('phone')
    .exists().withMessage('Phone must be provided')
    .isLength({ min: 10, max: 15 }).withMessage('Phone provided must be valid')
    .matches('[0-9]').withMessage('Phone must contain numbers')

]


// 
module.exports.service_provider = [

    check('name')
    .exists().withMessage('Name must be provided')
    .isLength({ min: 5, max: 30 }).withMessage('Name must be atleast 5 characters long')
    .matches('[a-zA-Z]').withMessage('Name must contain letters'),

    check('city')
    .exists().withMessage('City must be provided')
    .matches('[a-zA-Z]').withMessage('City must contain letters'),

    check('is_company')
    .exists().withMessage('Phone must be provided')
    // .isLength({ min: 10, max: 15 }).withMessage('Phone provided must be valid'),

]


// validate the user register body parameters
module.exports.register = [

    check('username')
    .exists().withMessage('Name must be provided')
    .isLength({ min: 7, max: 30 }).withMessage('Name must be atleast 7 characters long')
    .isString().withMessage('Name must contain letters')
    .custom(async(name, { req }) => {
        let userQuery = 'select * from users where username = ?'
        let [userResult] = await db.query(userQuery, [name])

        if (userResult && userResult[0]) {
            return Promise.reject('Name Has Already Been Used')
        }
    }),

    check('password')
    .exists().withMessage('Password must be provided')
    .isLength({ min: 7, max: 30 }).withMessage('Password must be atleast 7 characters long')
    .matches('[0-9]').withMessage('Name must contain numbers')
    .matches('[a-zA-Z]').withMessage('Name must contain letters'),

    check('password_confirmation')
    .custom((passcon, { req }) => passcon == req.body.password)
    .withMessage('Passwords Must Match'),

    check('email')
    .exists().withMessage('Email must be provided')
    .isEmail().withMessage('Email provided must be valid'),

    check('city')
    .exists().withMessage('City must be provided')
    .isString().withMessage('City provided must be valid'),

    check('type')
    .exists().withMessage('User type must be provided')
    .isIn(['CONTENT_CREATOR', 'REGULAR']).withMessage('User type provided must be valid')

    /*
    check('dob')
        .exists().withMessage('Date Of Birth must be provided')
        //.toDate()
        .isBefore(Date.now().toString()).withMessage('Date Is Not Valid')
    */

]



module.exports.update = [

    check('username')
    .exists().withMessage('Name must be provided')
    .not().isEmpty().withMessage('Name must be provided')
    .isLength({ min: 7, max: 30 }).withMessage('Name must be atleast 7 characters long')
    .isString().withMessage('Name must contain letters'),

    check('email')
    .exists().withMessage('Email must be provided')
    .isEmail().withMessage('Email provided must be valid'),

    check('city')
    .exists().withMessage('City must be provided')
    .isString().withMessage('City provided must be valid'),

    check('type')
    .exists().withMessage('User type must be provided')
    .isIn(['CONTENT_CREATOR', 'REGULAR']).withMessage('User type provided must be valid')

    /*
    check('dob')
        .exists().withMessage('Date Of Birth must be provided')
        //.toDate()
        .isBefore(Date.now().toString()).withMessage('Date Is Not Valid')
    */

]

// format errors that are generated by express validator 
module.exports.errorFormatter = ({ location, msg, param, value, nestedErrors }) => {
    return { field: param, error: msg }
};